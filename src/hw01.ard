-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.

\func second (x y z : Nat) => y

\func apply (f : Nat -> Nat) (x : Nat) => f x

\func compose (f : Nat -> Nat) (g : Nat -> Nat) => \lam x => f (g x)

\func flip (f : Nat -> Nat -> Nat) => \lam x y => f y x

\func second' => flip (\lam y z => second 0 y z)

{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func \fix 8 f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infix 5 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infix 10 f5 => f1
\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6

\func test' => (f1 f2) `f3` (f4 `f5` f6)

-- 4. Определите функцию if, аналогичную следующей функции:

\func if (b tc fc : Bool) : Bool  \elim b
  | true => tc
  | false => fc

{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool \elim x
  | true => true
  | false => y

\func ||test00 : false || false = false => idp
\func ||test10 : true || false = true => idp
\func ||test01 : false || true = true => idp
\func ||test11 : true || true = true => idp

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | suc y' => x * (x ^ y')

\func ^test : 5 ^ 2 = 25 => idp

\func fac (x : Nat) : Nat  \elim x
  | 0 => 1
  | suc x' => (suc x') * (fac x')

\func factest : fac 5 = 120 => idp

-- 7. Определите mod и gcd.

\func mod (x y : Nat) => mod' x x y
  \where
    \func mod' (fuel x y : Nat) : Nat \elim fuel
      | 0 => 0
      | (suc fuel') => \case ((x + 1) - y) \with {
        | 0 => x
        | _ => mod' fuel' (x - y) y
      }

\func modtest1 : mod 4 5 = 4 => idp
\func modtest2 : mod 9 5 = 4 => idp
\func modtest3 : mod 10 5 = 0 => idp

\func gcd (x y : Nat) => gcd' (x + y) x y
  \where
    \func gcd' (fuel x y : Nat) : Nat \elim fuel
      | 0 => 0
      | (suc fuel') => \case y \with {
        | 0 => x
        | _ => gcd' fuel' y (x `mod` y)
      }

\func gcdtest1 : gcd 3 6 = 3 => idp
\func gcdtest2 : gcd 3 1 = 1 => idp
\func gcdtest3 : gcd 3 100 = 1 => idp