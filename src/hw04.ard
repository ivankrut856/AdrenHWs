\import Utils
\import lect03 (+-comm)
\import lect04 (Nat-elim, Nat-rec)
\open Nat \hiding (<=)

-- 1. Определите факториал через Nat-rec.

\func fact (n : Nat) => Nat-rec Nat 1 (\lam n acc => (suc n) * acc) n

-- 2. Докажите ассоциативность сложения для натуральных чисел через Nat-elim.

\func +-assoc (n m k : Nat) : n + m + k = n + (m + k) =>
  Nat-elim (\lam k' => n + m + k' = n + (m + k'))
      idp
      (\lam k rec => pmap suc rec)
      k


-- 3. Определите рекурсор и элиминатор для D.

\data D
  | con1 Nat
  | con2 D D
  | con3 (Nat -> D)

\func D-elim (P : D -> \Type)
             (case1 : \Pi (n : Nat) -> P (con1 n))
             (case2 : \Pi (d1 d2 : D) -> P d1 -> P d2 -> P (con2 d1 d2))
             (case3 : \Pi (f : Nat -> D) -> (\Pi (n : Nat) -> P (f n)) -> P (con3 f))
             (x : D) : P x \elim x
  | con1 n => case1 n
  | con2 d1 d2 => case2 d1 d2 (D-elim P case1 case2 case3 d1) (D-elim P case1 case2 case3 d2)
  | con3 f => case3 f (\lam n => (D-elim P case1 case2 case3 (f n)))

\func D-rec (P : \Type)
            (case1 : Nat -> P)
            (case2 : D -> D -> P -> P -> P)
            (case3 : (Nat -> D) -> (Nat -> P) -> P)
            (x : D) : P =>
  D-elim (\lam _ => P) case1 case2 case3 x

{- To check that the definition of D-elim and D-rec is correct, you can try to implement foo using D-rec.
\func foo (d : D) : Nat
  | con1 n => n
  | con2 d1 d2 => foo d1 Nat.+ foo d2
  | con3 g => foo (g (foo (g 100)))
-}

\func foo (d : D) : Nat =>
  D-rec Nat
      (\lam n => n)
      (\lam _ _ Pd1 Pd2 => Pd1 Nat.+ Pd2)
      (\lam g sel => sel (sel 100))
      d

\func Kak-Bawe-eto-tectut??? => 0

\func foo' (d : D) : Nat
  | con1 n => n
  | con2 d1 d2 => foo d1 Nat.+ foo d2
  | con3 g => foo (g (foo (g 100)))

\func foo_eq_foo' (d : D) : foo d = foo' d \elim d
  | con1 n => idp
  | con2 d1 d2 => idp
  | con3 _x => idp

\func tectut-He-HywHo => 0

-- 4. Определите рекурсор и элиминатор для List.

\func List-elim {A : \Type}
                (P : List A -> \Type)
                (Rnil : P nil)
                (Rcons : \Pi (a : A) (l : List A) -> P l -> P (cons a l))
                (l : List A) : P l \elim l
  | nil => Rnil
  | cons a l => Rcons a l (List-elim P Rnil Rcons l)

\func List-rec {A : \Type}
               (P : \Type)
               (Rnil : P)
               (Rcons : A -> List A -> P -> P)
               (l : List A) : P =>
  List-elim (\lam _ => P) Rnil Rcons l

-- 5. Докажите pmap при помощи паттерн матчинга с idp.

\func pmap'''' {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a' \elim p
  | idp => idp

-- Optional:
-- 6. У оператора J есть другая форма, которую мы будем называть Jalt. Докажите, что J и Jalt эквивалентны, то есть выразите одно через другое и наоборот.

-- Выразите Jalt через J. Можно пользоваться только J, idp и всем, что через них выражается.

--\func J
--  {A : \Type} {a : A}
--  (B : \Pi (a' : A) -> a = a' -> \Type)
--  (b : B a idp)
--  {a' : A} (p : a = a')
--  : B a' p

\func Jalt {A : \Type} (B : \Pi (a a' : A) -> a = a' -> \Type)
           (b : \Pi (a : A) -> B a a idp)
           {a a' : A} (p : a = a') : B a a' p =>
  J (\lam a' Heq => B a a' Heq) (b a) p


-- Выразите J через Jalt. Можно пользоваться только Jalt, idp и всем, что через них выражается.
-- Hint:
-- a. Выразите transport через Jalt.
-- b. Докажите, что тип \Sigma (x : A) (a = x) одноэлементный, то есть, что для любого p : \Sigma (x : A) (a = x) верно, что (x,idp) = p.
-- c. Используя эти две конструкции, легко определить J.

\func transport'' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => kek B p b
  \where {
    \func kek {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') : B a -> B a' =>
      Jalt (\lam a a' p => B a -> B a') (\lam _ => (\lam x => x)) p
  }

\func sigma-contr {A : \Type} {a : A} (p : \Sigma (x : A) (a = x)) : (a, idp) = {\Sigma (x : A) (a = x)} p =>
  Jalt (\lam a a' pf => (a, idp) = {\Sigma (x : A) (a = x)} (a', pf)) (\lam _ => idp) p.2

\func J' {A : \Type} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type)
         (b : B a idp)
         {a' : A} (p : a = a') : B a' p =>
  transport'' {\Sigma (x : A) (a = x)}
      (\lam x => \case x \with {
        | (a', p) => B a' p
      }) 
      (sigma-contr (a', p)) b

-- 7. Докажите, что vnil является нейтральным элементом для v++.

\func vnil-rightId {A : \Type} {n : Nat} (xs : Vec A n) : transport (Vec A) (+-comm 0 n) (xs v++ vnil) = xs \elim n, xs
  | 0, vnil => idp
  | suc n, vcons a xs =>
  J (\lam e (p : 0 + n = e) =>
      transport (Vec A) (pmap suc p) (vcons a (xs v++ vnil))
    = vcons a (transport (Vec A) p (xs v++ vnil)))
    idp
    (+-comm 0 n)
    *>
  pmap (vcons a) (vnil-rightId xs)

-- 8. Докажите, что 0 не равно suc x, не используя паттерн матчинг на равенстве.

\func zero/=suc (x : Nat) (p : 0 = suc x) : Empty =>
  transport (\lam x => \case x \with { 0 => \Sigma  | _ => Empty} ) p ()
