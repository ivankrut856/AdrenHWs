\import Utils
\import hw01 (gcd)
\import hw05 (trans)
\import lect05 (funExt)
\import lect06
\open Nat(+)

-- 1. Определите функцию swap несколькими способами.

-- При помощи \cowith и доступа к полям.
\func swap {A B : \Type} (p : Pair A B) : Pair B A \cowith
  | fst_ => snd_ {p}
  | snd_ => fst_ {p}

-- При помощи \new и паттерн матчинга.
\func swap' {A B : \Type} (p : Pair A B) : Pair B A \elim p
  | (a,b) => \new Pair { | fst_ => b | snd_ => a }

-- При помощи \new и доступа к полям.
\func swap'' {A B : \Type} (p : Pair A B) : Pair B A =>
  \new Pair { | fst_ => snd_ {p} | snd_ => fst_ {p} }

-- 2. Докажите, что swap (swap p) = p.

\func swap-involutive {A B : \Type} (p : Pair A B) : swap (swap p) = p \elim p
  | (a,b) => idp

-- 3. Докажите, что тип PosNat 0 пустой, а тип PosNat 1 нет.

\func zero-isNotPos (p : PosNat 0) : Empty => PosNat.p {p}

\func one-isPos : PosNat 1 => \new PosNat { | n => 1 | p => ()}

-- 4. Определите \record, состоящий из пар взаимно простых натуральных чисел.
--    Определите тип, состоящий из натуральных чисел, взаимно простых с 60.

\record CoPrimeNats
  | p : Nat
  | q : Nat
  | Hcp : ((gcd p q) = 1)

\func CoPrimeWith60 : \Type => \Sigma (n : Nat) (p : CoPrimeNats n 60)

\func CoPrimeWith60Test : CoPrimeWith60 => (7, \new CoPrimeNats { | Hcp => idp })

-- 5. Закончите определение класса монад. Этот класс должен содержать все монадные законы и реализовывать все поля из класса функторов.

\class Monad \extends Functor
  | return {A : \Type} : A -> F A
  | \infixl 1 >>= {A B : \Type} : F A -> (A -> F B) -> F B
  | leftId {A B : \Type} (a : A) (f : A -> F B) : (return a >>= f) = f a
  | rightId {A : \Type} {a : F A} : (a >>= return) = a
  | assoc {A B C : \Type} {a : F A} {f : A -> F B} {g : B -> F C} :
    ((a >>= f) >>= g) = (a >>= (\lam x => f x >>= g))
  | fmap f x => x >>= (\lam x => return (f x))
  | fmap-id y =>
    transport (\lam a' => a' = y) (sym rightId) idp
  | fmap-comp {A B C :\Type } f g y =>
    transport (\lam a' => (y >>= (\lam x => return (g (f x)))) = a') (sym assoc) (
      pmap (\lam f => y >>= f) (funExt (\lam _ => F C) (
        \lam x => sym (leftId (f x) (\lam x => return (g x)))
      ))
    )

-- 6. Определите \instance Monad для Maybe.

\instance MaybeMonad : Monad Maybe => \new Monad {
  | return {A : \Type} (a : A) => just a
  | >>= m f => \case m \with {
    | nothing => nothing
    | just a => f a
  }
  | leftId {A B : \Type} (a : A) (f : A -> Maybe B) => idp
  | rightId {A : \Type} {a : Maybe A} => \case \elim a \with {
    | nothing => idp
    | just _ => idp
  }
  | assoc {A B C : \Type} {a : Maybe A} {f : A -> Maybe B} {g : B -> Maybe C} => \case \elim a \with {
    | nothing => idp
    | just a => idp
  }
}

-- 7. Определите \instance Monad для State и State'.

\record State (S A : \Type)
  | state : S -> \Sigma S A

\data State' (S A : \Type)
  | state' (S -> \Sigma S A)

\instance StateMonad (S : \Type) : Monad (State S)
  | return {A : \Type} (a : A) => \new State {
    | state => \lam s => (s, a)
  }
  | >>= m f => \new State {
    | state => \lam s =>
        \let mf => state {m} \in
        \let (ms, ma) => mf s \in
        \let ff => state {f ma} \in
        ff ms
  }
  | leftId {A B : \Type} (a : A) (f : A -> State S B) => idp
  | rightId {A : \Type} {a : State S A} => idp
  | assoc {A B C : \Type} {a : State S A} {f : A -> State S B} {g : B -> State S C} => idp

\instance State'Monad (S : \Type) : Monad (State' S)
  | return {A : \Type} (a : A) => state' (
    \lam s => (s, a)
  )
  | >>= m f => state' (
    \lam s => \case m \with {
      | state' mf =>
        \let (ms, ma) => mf s \in
        \case f ma \with {
          | state' ff => ff ms
        }
    }
  )
  | leftId {A B : \Type} (a : A) (f : A -> State' S B) =>
    \case f a \as a', idp : f a = a' \with {
      | state' ff, p => transport (\lam a' =>
        state' (\lam s => (
        \let ms_ma => (s, a)
        \in \case f ms_ma.2 \with {
          | state' ff => ff ms_ma.1
        })) = a') (sym p) (
        pmap state' (
          transport (\lam a' => (\lam s => (
            \let ms_ma => (s, a)
            \in \case a' \return \Sigma S B \with {
              | state' ff => ff ms_ma.1
            })) = ff) (sym p) idp
        )
      )
    }
  | rightId {A : \Type} {a : State' S A} => \case \elim a \with {
    | state' af => pmap state' (
      funExt (\lam _ => \Sigma S A) (\lam s => idp)
    )
  }
  | assoc {A B C : \Type} {a : State' S A} {f : A -> State' S B} {g : B -> State' S C} => \case \elim a \with {
    | state' af => pmap state' (funExt (\lam _ => \Sigma S C) (\lam s =>
      \case f (af s).2 \as fexp, idp : f (af s).2 = fexp \with {
        | state' fff, p => transport (\lam exp => ((
          \let ms_ma =>
                 \let ms_ma => af s
                 \in \case exp \return \Sigma S B \with {
                   | state' ff => ff ms_ma.1
                 }
          \in \case g ms_ma.2 \with {
            | state' ff => ff ms_ma.1
          }) = (\case exp \with {
          | state' mf =>
            \let ms_ma => mf (af s).1
            \in \case g ms_ma.2 \with {
              | state' ff => ff ms_ma.1
            }
        }))) (sym p) (
          \case g (fff (af s).1).2 \as gexp, idp : g (fff (af s).1).2 = gexp \with {
            | state' ggg, q => transport (\lam ggg =>
                ( \let ms_ma => fff (af s).1
                  \in \case ggg \with {
                    | state' ff => ff ms_ma.1
                  }) = (
                 \let ms_ma => fff (af s).1
                 \in \case ggg \with {
                   | state' ff => ff ms_ma.1
                 })) (sym q) idp
          }
        )
      }
    ))
  }
