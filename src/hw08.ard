\import Arith.Nat
\import Algebra.Meta
\import Algebra.Ring
\import Algebra.Monoid
\import Algebra.Semiring
\import Data.List
\import Data.Or
\import Logic.Meta
\import Meta
\import Order.LinearOrder
\import Paths.Meta
\import Utils (*>, <->, Empty, Maybe, absurd, just, maybe, nothing, pmap, sym)
\import hw01
\import hw05 (funExt)
\import lect07(Decide, no, yes)
\import lect08
\open LinearOrder
\open lect08.Insertion

-- 1. Докажите, что Perm l1 l2 тогда и только тогда, когда Insertion.sort l1 = Insertion.sort l2.

\func length {A : \Type} (xs : List A) : Nat
  | nil => 0
  | :: a xs => 1 Nat.+ length xs

\func perm-length {A : \Type} {xs ys : List A} (Hp : Perm xs ys) : length xs = length ys \elim xs, ys, Hp
  | nil, nil, _ => idp
  | :: x xs, :: y ys, perm-:: p Hp => pmap suc (perm-length Hp)
  | :: x (:: x' xs), :: y (:: y' ys), perm-swap p p' ps => pmap suc (pmap suc (pmap length ps))
  | xs, ys, perm-trans Hp1 Hp2 => perm-length Hp1 *> perm-length Hp2

\func perm-symm {A : \Type} {xs ys : List A} (Hp : Perm xs ys) : Perm ys xs \elim xs, ys, Hp
  | nil, nil, perm-nil => perm-nil
  | :: x xs, :: y ys, perm-:: p Hp => perm-:: (sym p) (perm-symm Hp)
  | :: x (:: x' xs), :: y (:: y' ys), perm-swap p p' ps => perm-swap (sym p') (sym p) (sym ps)
  | xs, ys, perm-trans Hp1 Hp2 => perm-trans (perm-symm Hp2) (perm-symm Hp1)

\func perm-correct {A : LinearOrder.Dec} {xs ys : List A} (Hp : Perm xs ys)
  : sort xs = sort ys
  \elim xs, ys, Hp
    | nil, nil, _ => idp
    | :: x xs, :: y ys, perm-:: p Hp => rewrite (perm-correct Hp) (rewrite p idp)
    | :: x (:: x' xs), :: y (:: y' ys), perm-swap p p' ps =>
      rewrite p (rewrite p' (rewrite ps (sort-perm.insert-comm y' y (sort ys))))
    | xs, ys, perm-trans Hp1 Hp2 => perm-correct Hp1 *> perm-correct Hp2

\func perm-complete {A : LinearOrder.Dec} {xs ys : List A} (Hs : Insertion.sort xs = Insertion.sort ys)
  : Perm xs ys =>
  \let xPerm : Perm xs (Insertion.sort xs) => sort-perm xs \in
  \let yPerm : Perm ys (Insertion.sort ys) => sort-perm ys \in
    perm-trans xPerm (rewrite Hs (perm-symm yPerm))

\func perm-spec {A : LinearOrder.Dec} (xs ys : List A) : Perm xs ys <-> (Insertion.sort xs = Insertion.sort ys) =>
  (\lam H => perm-correct H, \lam H => perm-complete H)

-- 2. Докажите, что спецификация "результат является перестановкой входа и отсортирован" является полной для функции sort.

\func nil-cons-Perm {A : \Type} {x : A} {xs : List A} (H : Perm nil (x :: xs)) : Empty
  => \let NiceHypothesisReallyMustBeTrue => (perm-length H) \in contradiction

\func cons-nil-Perm {A : \Type} {x : A} {xs : List A} (H : Perm (x :: xs) nil) : Empty
  => \let NiceHypothesisReallyMustBeTrue => (perm-length H) \in contradiction

\func sorted-sort {A : Dec} (l : List A) (s : Sorted l) : Insertion.sort l = l
  | nil, sorted-nil => idp
  | :: x xs, sorted-cons _x s => run {
    rewrite (sorted-sort xs s),
    \case xs \as t, idp : xs = t \with {
      | nil, p => rewrite p idp
      | :: a t, p => run {
        rewrite p,
        rewrite p at _x,
        \case dec<_<= a x \as tt, idp : dec<_<= a x = tt \with {
          | inl Habsurd, p' => contradiction
          | inr b, p' => rewrite p' idp
        }
      }
    }
  }

\func exoticC {A : Dec} (l l' : List A) (p : Perm l l') (s : Sorted l) (s' : Sorted l')
  : l = l'
  \elim l, l', p, s, s'
    | nil, nil, perm-nil, sorted-nil, sorted-nil => idp
    | :: x xs, :: y ys, perm-:: p p1, sorted-cons _x s, sorted-cons _y s' =>
      \let rec => exoticC xs ys p1 s s' \in run {
        rewriteI rec,
        (pmap (__ :: xs) p)
      }
      | :: x (:: x' xs), :: y (:: y' ys), perm-swap p p1 p2, sorted-cons _x s, sorted-cons _y s' => run {
        rewrite p1 at _x,
        rewriteI p at _y,
        \let Heq => Dec.=>TotalOrder.<=-antisymmetric _x _y \in run {
          rewriteI p,
          rewrite p1,
          rewrite Heq,
          rewrite p2,
          idp
        }
      }
      | nil, nil, perm-trans p1 p2, sorted-nil, sorted-nil => idp
      | nil, :: x xs, perm-trans p1 p2, sorted-nil, sorted-cons _x s' => absurd (nil-cons-Perm (perm-trans p1 p2))
      | :: x xs, nil, perm-trans p1 p2, sorted-cons _x s, sorted-nil => absurd (cons-nil-Perm (perm-trans p1 p2))
    | :: x xs, :: y ys, perm-trans p1 p2, s, s' =>
      \let H1 => perm-correct p1 \in
      \let H2 => perm-correct (perm-symm p2) \in
      \let Heq1 => sorted-sort _ s \in
      \let Heq2 => sorted-sort _ s' \in run {
        rewrite H1 at Heq1,
        rewrite H2 at Heq2,
        rewriteI Heq1,
        rewriteI Heq2,
        idp
      }

\func completeness {A : Dec} (sort' : List A -> List A) (l : List A) (p : Perm l (sort' l)) (s : Sorted (sort' l)) :
  sort' l = Insertion.sort l
  => exoticC _ _ (perm-trans (perm-symm p) (sort-perm l)) s (sort-sorted l)

-- 3. Определите факториал через хвостовую рекурсию.
--    Докажите, что он равен обычному определению факториала.

\func facT (n : Nat) : Nat => facAux 1 n
  \where \func facAux (acc : Nat) (n : Nat) : Nat \elim n
    | 0 => acc
    | suc n => facAux (acc * (suc n)) n

\func fac=facT (n : Nat) : fac n = facT n => sym (run {
  \let H => aux 1 n \in
  rewriteF (NatSemiring.ide-left {fac n}) H
})
  \where \func aux (acc : Nat) (n : Nat) : facT.facAux acc n = acc * fac n \elim n
    | 0 => idp
    | suc n => rewrite (aux (acc * n + acc) n) (run {
      rewriteI (NatSemiring.*-assoc),
      idp
    })

-- 4. Закончите определение \instance Monad для Term.

\class Functor (F : \Type -> \Type)
  | fmap {A B : \Type} (f : A -> B) : F A -> F B
  | fmap-id {A : \Type} (y : F A) : fmap (\lam (x : A) => x) y = y
  | fmap-comp {A B C : \Type} (f : A -> B) (g : B -> C) (y : F A)
  : fmap (\lam x => g (f x)) y = fmap g (fmap f y)

\class Monad \extends Functor
  | return {A : \Type} : A -> F A
  | \infixl 1 >>= {A B : \Type} : F A -> (A -> F B) -> F B
  | >>=-left {A B : \Type} (a : A) (k : A -> F B) : (return a >>= k) = k a
  | >>=-right {A : \Type} (m : F A) : (m >>= return) = m
  | >>=-assoc {A B C : \Type} (m : F A) (k : A -> F B) (l : B -> F C) : ((m >>= k) >>= l) = (m >>= (\lam a => k a >>= l))
  | fmap => {?}
  | fmap-id => {?}
  | fmap-comp => {?}

\instance MaybeMonad : Monad Maybe
  | return => just
  | >>= m k => maybe nothing k m
  | >>=-left => \lam {A} {B} a k => idp
  | >>=-right => \lam {A} m => cases m idp
  | >>=-assoc {A B C : \Type} (x : Maybe A) (f : A -> Maybe B) (g : B -> Maybe C)
  : maybe nothing g (maybe nothing f x) = maybe nothing (\lam a => maybe nothing g (f a)) x
  \elim x {
    | nothing => idp
    | just a => \case f a \as t, idp : f a = t \with {
      | nothing, p => idp
      | just a', p => run {
        rewrite p,
        idp
      }
    }
  }

\func termMap {A B : \Type} (f : A -> B) (t : Term A) : Term B \elim t
  | var v => var (f v)
  | unit => unit
  | app t1 t2 => app (termMap f t1) (termMap f t2)
  | lam t => lam (termMap (maybe nothing (\lam x => just (f x))) t)

\func test1 {A : \Type} => termMap {A} just (lam (var nothing)) = lam (var (just nothing))

{-
-- это некорректное определение termMap just
\func lift {A : \Type} (t : Term A) : Term (Maybe A) \elim t
  | var v => var (just v)
  | unit => unit
  | app t1 t2 => app (termMap just t1) (termMap just t2)
  | lam t => lam (termMap just t)
-}

\func liftM {A B : \Type} (k : A -> Term B) (m : Maybe A) : Term (Maybe B)
  => maybe (var nothing) (\lam a => termMap just (k a)) m

--\func liftM-var {A : \Type} : liftM {A} {A} var = var =>
--  funExt (\lam _ => Term (Maybe A)) (
--    \lam a => \case \elim a \with {
--      | nothing => idp
--      | just a' => idp
--    }
--  )
--
--\func liftM-kek {A B : \Type} (t : Term A) (f : A -> Term B)
--  : termMap just (t TermMonad.>>= f) = (termMap just t TermMonad.>>= liftM f)
--  \elim t {
--    | var v => idp
--    | unit => idp
--    | app t1 t2 => run {
--      rewrite (liftM-kek t1),
--      rewrite (liftM-kek t2),
--      idp
--    }
--    | lam t => {?}
--  }

--\func liftM-just {A B : \Type} (a : A) (k : A -> Term B) : (liftM k) (just a) = k a
--
--\func maybenj {A : \Type} : maybe {A} nothing just = (\lam x => x) => funExt (\lam _ => Maybe A)
--    (\lam a => cases a idp)
--
--\func maybenjf {A B C : \Type} (f : A -> B) (g : B -> C) (x : Maybe A) :
--  (maybe {A} nothing (\lam x => just (g x))) ((maybe nothing (\lam x => just (f x)) x))

--\instance TermFunctor : Functor Term
--  | fmap => termMap
--  | fmap-id {A} (y : Term A) : termMap (\lam x => x) y = y \elim y {
--    | var v => idp
--    | unit => idp
--    | app y1 y2 => run {
--      rewrite (fmap-id y1),
--      rewrite (fmap-id y2),
--      idp
--    }
--    | lam y => run {
--      rewrite MaybeMonad.fmap-id,
--      {?}
----      rewrite (fmap-id y),
----      idp
--    }
--  }
--  | fmap-comp {A} {B} {C} (f : A -> B) (g : B -> C) (y : Term A)
--  : termMap (\lam x => g (f x)) y = termMap g (termMap f y)
--  \elim y {
--    | var v => idp
--    | unit => idp
--    | app y1 y2 => run {
--      rewrite (fmap-comp f g y1),
--      rewrite (fmap-comp f g y2),
--      idp
--    }
--    | lam y => run {
--      rewriteI (fmap-comp
--          (maybe nothing (\lam x => just (f x)))
--          (maybe nothing (\lam x => just (g x)))
--          y),
--      {?}
--    }
--  }

--\func termMap-just {U V : \Type} (x : Term U) (f : U -> Term V)
--  : (termMap just (x TermMonad.>>= f)) = ((termMap just x) TermMonad.>>= (liftM f))
--  \elim x
--    | var v => idp
--    | unit => idp
--    | app x1 x2 => run {
--      rewrite (termMap-just x1 f),
--      rewrite (termMap-just x2 f),
--      idp
--    }
--    | lam x => run {
--      {?}
--    }

\instance TermMonad : Monad Term
  | return => var
  | >>= {A B : \Type} (t : Term A) (k : A -> Term B) : Term B \elim t {
    | var v => k v
    | unit => unit
    | app t1 t2 => app (t1 >>= k) (t2 >>= k)
    | lam t => lam (t >>= liftM k)
  }
  | >>=-left => \lam {A} {B} a k => idp
  | >>=-right {A} (m : Term A) : (m >>= var) = m \elim m {
    | var v => idp
    | unit => idp
    | app m1 m2 => rewrite (>>=-right {A} m1) (rewrite (>>=-right {A} m2) idp)
    | lam m => run {
      rewrite (liftM-var),
      rewrite (>>=-right m),
      idp
    }
  }
  | >>=-assoc {A} {B} {C} (ta : Term A) (fab : A -> Term B) (fbc : B -> Term C)
              : (ta >>= fab >>= fbc) = (ta >>= (\lam a => fab a >>= fbc))
  \elim ta {
    | var v => idp
    | unit => idp
    | app ta1 ta2 => rewrite (>>=-assoc ta1) (rewrite (>>=-assoc ta2) idp)
    | lam ta =>
      \let
        liftM-kleisli (f : A -> Term B) (g : B -> Term C):
          (liftM (\lam a => f a >>= g)) = (\lam a => liftM f a >>= liftM g)
        => funExt (\lam _ => Term (Maybe C)) (\lam a =>
          \case \elim a \with {
            | nothing => idp
            | just a' =>
              \let H : termMap just (f a' >>= g) = (termMap just (f a') >>= liftM g)
                   => {?}
              \in
              H
          }
        )
      \in
      run {
        rewrite (>>=-assoc ta (liftM fab) (liftM fbc)),
        rewrite (liftM-kleisli fab fbc),
        idp
      }
  }

-- 5. Определите отношение многошаговой редукции на Term.

\data Red {V : \Type} (t s : Term V)
  | Red-refl (Heq : t = s)
  | Red-trans (z : Term V) (Htz : Red1 t z) (Hzs : Red z s)


-- 6. Стратегия редукции -- это функция, которая каждому терму сопоставляет либо некоторый терм, к которому он редуцируется за 1 шаг, либо доказательство, что таких термов нет.
--    Определите любую стратегию редукции.

\func tryBeta {V : \Type} (t1 t2 : Term V) : Decide (\Sigma (s : Term V) (f : Term (Maybe V)) (lam f = t1)
                                                            ((f TermMonad.>>= maybe t2 var) = s))
  | var v, var v1 => no (\lam _x => contradiction _x.3)
  | var v, unit => no (\lam _x => contradiction _x.3)
  | var v, app t2 t1 => no (\lam _x => contradiction _x.3)
  | var v, lam t2 => no (\lam _x => contradiction _x.3)
  | unit, var v => no (\lam _x => contradiction _x.3)
  | unit, unit => no (\lam _x => contradiction _x.3)
  | unit, app t2 t1 => no (\lam _x => contradiction _x.3)
  | unit, lam t2 => no (\lam _x => contradiction _x.3)
  | app t1 t2, var v => no (\lam _x => contradiction _x.3)
  | app t1 t2, unit => no (\lam _x => contradiction _x.3)
  | lam f, t2 => yes ((f TermMonad.>>= maybe t2 var), f, idp, idp)
  | app t1 t2, app t3 t4 => no (\lam _x => contradiction _x.3)
  | app t1 t2, lam t3 => no (\lam _x => contradiction _x.3)

\func strategy {V : \Type} (t : Term V) : Decide (\Sigma (s : Term V) (Red1 t s)) \elim t
  | var v => no (\lam _x => \case _x.2)
  | unit => no (\lam _x => \case _x.2)
  | app t1 t2 => \case strategy t1 \with {
    | yes (t, Ht) => yes (app t t2, appLeft Ht idp)
    | no noLeft => \case strategy t2 \with {
      | yes (t, Ht) => yes (app t1 t, appRight idp Ht)
      | no noRight => \case (tryBeta t1 t2) \with {
        | yes a => yes (a.1, beta a.2 a.3 a.4)
        | no noBeta => no (\lam _x => \case _x \with {
          | (app s1 s2, appLeft r1 p) => noLeft (s1, r1)
          | (app s1 s2, appRight p r1) => noRight (s2, r1)
          | (s, beta f p1 p2) => (noBeta (s, f, p1, p2))
        })
      }
    }
  }
  | lam t => \case strategy t \with {
    | yes a => yes (lam a.1, lamRed a.2)
    | no _x => no (\lam Habsurd => \case Habsurd.1 \as t, idp : Habsurd.1 = t \with {
      | var v, p => run {
        \let H' => rewriteF p Habsurd.2 \in
        \case H'
      }
      | unit, p => run {
        \let H' => rewriteF p Habsurd.2 \in
          \case H'
      }
      | app t1 t2, p => run {
        \let H' => rewriteF p Habsurd.2 \in
          \case H'
      }
      | lam t1, p => run {
        \let H' => rewriteF p Habsurd.2 \in
        \case H' \with {
          | lamRed r => _x (t1, r)
        }
      }
    }
    )
  }

-- 7. Докажите, что подтермы достижимого терма достижимы.

\func appAccLeft {V : \Type} {t s : Term V} (appAcc : Acc Red1 (app t s)) : Acc Red1 t
  \elim appAcc
    | acc Happ => acc (\lam a' red => \case t \as e, idp : t = e \with {
      | var v, p => (rewrite p at red) (contradiction)
      | unit, p => (rewrite p at red) (contradiction)
      | app tf ts, Heq => run {
        rewrite Heq at red,
        \case \elim a', red \with {
          | app sf ss, appLeft r p => appAccLeft {V} {_} {s} (Happ (app (app sf ss) s)
              (appLeft (run {
                rewrite Heq,
                rewrite p,
                appLeft r idp
              })
                  idp))
          | app sf ss, appRight p r => appAccLeft {V} {_} {s} (Happ (app (app sf ss) s)
              (appLeft (run {
                rewrite Heq,
                rewrite p,
                appRight idp r
              })
                  idp))
          | ss, beta f Hp Hq => appAccLeft {V} {_} {s} (Happ (app ss s) (
            appLeft (run {
              rewrite Heq,
              beta f Hp Hq
            }) idp
          ))
        }
      }
      | lam lamT, Heq => run {
        (rewrite Heq at red),
        \case \elim a', red \with {
          lam lamT', lamRed lamR =>
              (appAccLeft {V} {_} {s} (Happ (app (lam lamT') s) (appLeft (rewriteF (sym Heq) (lamRed lamR)) idp)))
        }
      }
    })

\func appAccRight {V : \Type} {t s : Term V} (appAcc : Acc Red1 (app t s)) : Acc Red1 s
  \elim appAcc
    | acc Happ => acc (\lam a' red => \case s \as e, idp : s = e \with {
      | var v, p => (rewrite p at red) (contradiction)
      | unit, p => (rewrite p at red) (contradiction)
      | app tf ts, Heq => run {
        rewrite Heq at red,
        \case \elim a', red \with {
          | app sf ss, appLeft r p => appAccRight {V} {t} {_} (Happ (app t (app sf ss))
              (appRight idp (run {
                rewrite Heq,
                rewrite p,
                appLeft r idp
              })
                  ))
          | app sf ss, appRight p r => appAccRight {V} {t} {_} (Happ (app t (app sf ss))
              (appRight idp (run {
                rewrite Heq,
                rewrite p,
                appRight idp r
              })
                  ))
          | ss, beta f Hp Hq => appAccRight {V} {t} {_} (Happ (app t ss) (
            appRight idp (run {
              rewrite Heq,
              beta f Hp Hq
            })
          ))
        }
      }
      | lam lamT, Heq => run {
        (rewrite Heq at red),
        \case \elim a', red \with {
        lam lamT', lamRed lamR =>
          (appAccRight {V} {t} {_} (Happ (app t (lam lamT')) (appRight idp (rewriteF (sym Heq) (lamRed lamR)))))
        }
      }
    })

\func subLamAcc {V : \Type} {t : Term (Maybe V)} (appAcc : Acc Red1 (lam t)) : Acc Red1 t
  \elim appAcc
    | acc Happ => acc (\lam a' red => \case t \as e, idp : t = e \with {
      | var v, p => (rewrite p at red) (contradiction)
      | unit, p => (rewrite p at red) (contradiction)
      | app tf ts, Heq => run {
        rewrite Heq at red,
        \case \elim a', red \with {
          | app sf ss, appLeft r p => subLamAcc (Happ (lam (app sf ss)) (lamRed (run {
            rewrite Heq,
            rewrite p,
            appLeft r idp
          })))
          | app sf ss, appRight p r => subLamAcc (Happ (lam (app sf ss)) (lamRed (run {
            rewrite Heq,
            rewrite p,
            appRight idp r
          })))
          | ss, beta f Hp Hq => subLamAcc (Happ (lam ss) (lamRed (run {
            rewrite Heq,
            beta f Hp Hq
          })))
        }
      }
      | lam tt, Heq => run {
        rewrite Heq at red,
        \case \elim a', red \with {
          | lam s, lamRed r => subLamAcc (Happ (lam (lam s)) (lamRed (run {
            rewrite Heq,
            lamRed r
          })))
        }
      }
    })

-- 8. Докажите следующую обобщенную лемму о подстановке и выведите из нее обычную версию:
-- если Г, x : A |- b : B и Г |- a : A, то Г |- b[a/x] : B.

--\func insertVal {U V : \Type} (t : Term V) (a : U -> Term V) : Maybe U -> Term V
--  => \lam u => \case u \with {
--    | nothing => t
--    | just x => a x
--  }

--\func hasTypeLiftM {U : \Type} (ctx : Maybe U -> Type) (t : Term (Maybe U)) (T D : Type) (Ht : hasType ctx t T)
--  : hasType (maybe D ctx) (termMap (maybe nothing (\lam x => just (just x))) t) T
--  \elim t, T, Ht
--    | unit, Unit, unitType => {?}
--    | var v, T, varType p => {?}
--    | app f a, B, appType Ht1 Ht2 => {?}
--    | lam t, Arr A B, lamType Ht => lamType ({?})
--
--\func lemKek {U A B : \Type} {ctx : U -> Type} {D A B : Type} {t : Term (Maybe U)} (H : hasType (maybe D (maybe A ctx)) (termMap just t) B)
--  : hasType (maybe A (maybe D ctx)) (termMap (maybe nothing (\lam x => just (just x))) t) B
--  => {?}

--\func hasTypeLift {U : \Type} (ctx : U -> Type) (t : Term U) (T D : Type) (Ht : hasType ctx t T)
--  : hasType (maybe D ctx) (termMap just t) T
--  \elim t, T, Ht
--    | unit, Unit, unitType => unitType
--    | var v, T, varType p => varType p
--    | app f a, B, appType Ht1 Ht2 => appType (hasTypeLift _ _ _ _ Ht1) (hasTypeLift _ _ _ _ Ht2)
--    | lam t, Arr A B, lamType Ht =>
--      lamType (\let Htp => hasTypeLift _ _ _ D Ht \in ( {?}
--      ))
--
--\func liftM-just {U V : \Type} (a : U -> Term V) (u : U) : liftM a (just u) = ((a u) TermMonad.>>= (\lam x => TermMonad.return (just x))) =>
--  {?}

--      hasType (maybe A ctx') (a mu' TermMonad.>>= (\lam x => TermMonad.return (just x))) (ctx mu')

-- substLem ? (a mu') (ctx mu') ? (maybe A ctx') (\lam x => TermMonad.return (just x)) ?

--\func hasTypeLift {U V : \Type} {ctx : V -> Type} {A T : Type} {a : U -> Term V} {u : U} (H : hasType ctx (a u) T)
--  : hasType (maybe A ctx) (liftM a (just u)) T

\func substLem {U V : \Type} (ctx : U -> Type) (b : Term U) (B : Type) (h : hasType ctx b B)
               (ctx' : V -> Type) (a : U -> Term V) (h' : \Pi (u : U) -> hasType ctx' (a u) (ctx u))
  : hasType ctx' (b >>= a) B
  \elim b, B, h
    | unit, Unit, unitType => unitType
    | var v, T, varType p =>
      \let H : (var v >>= a) = a v
           => idp
      \in run {
        rewrite H,
        rewriteI p,
        h' v
      }
    | app f x, T, appType {A} xT fT =>
      \let Hf : hasType ctx' (f >>= a) (Arr A T)
        => substLem ctx f (Arr A T) fT ctx' a h'
      \in
      \let Hx : hasType ctx' (x >>= a) A
        => substLem ctx x A xT ctx' a h'
      \in appType Hx Hf
    | lam tt, Arr A B, lamType h =>
      \let Htt : hasType (maybe A ctx') (tt >>= (liftM a)) B
        => substLem (maybe A ctx) tt B h (maybe A ctx') (liftM a) (
          \lam mu => \case \elim mu \with {
            | nothing => varType idp
            | just mu' => run {
--              rewrite (liftM-just a mu'),
              \let Lh => h' mu' \in
              {?}
----              hasType (maybe A ctx') (a mu' TermMonad.>>= (\lam x => TermMonad.return (just x))) (ctx mu')
--              substLem ctx' (a mu') (ctx mu') (h' mu') (maybe A ctx') (\lam x => TermMonad.return (just x))
--                  (\lam nu => varType idp)
            }}
          ) \in lamType Htt
--             substLem (maybe A ctx) tt B h (maybe A ctx') (liftM a) (
--          \lam mu => \case \elim mu \with {
--            | nothing => varType idp
--            | just u => \case (a u) \as e, idp : a u = e, (h' u) \with {
--              | var v, p, H => unfold liftM ( run {
--                rewrite p,
--                rewrite p at H,
--                varType (\case H \with {
--                  | varType Hp => Hp
--                })
--              })
--              | unit, p, H => unfold liftM ( run {
--                rewrite p,
--                rewrite p at H,
--                \case (ctx u) \as e', idp : ctx u = e' \with {
--                  | Arr e'1 e'2, Hp => run {
--                    rewrite Hp at H,
--                    \case H
--                  }
--                  | Unit, Hp => rewrite Hp unitType
--                }
--              })
--              | app tf ts, p, H => unfold liftM ( run {
--                rewrite p,
--                rewrite p at H,
--                \case H \with {
--                  | appType {A'} hf hs => appType {?} {?}
--                }
--              })
--              | lam e, p, H => {?}
--            }
--          }
--        )
--      \in lamType Htt
--      \let Htt => substLem (maybe A ctx) tt B h ctx' (insertVal {?} a) h' \in
--      {?}

-- если Г, x : A |- b : B и Г |- a : A, то Г |- b[a/x] : B.
\func substLem1 {U : \Type} (ctx : U -> Type) (A B : Type) (a : Term U) (f : Term (Maybe U))
                (Tf : hasType (maybe A ctx) f B)
                (Ta : hasType ctx a A)
  : hasType ctx (f >>= (maybe a var)) B
  => substLem (maybe A ctx) f B Tf ctx (maybe a var)
      (\lam u => \case \elim u \with {
        | nothing => Ta
        | just a' => varType idp
      })


-- 9. Докажите, что если Г |- a : A и Red a a', то Г |- a' : A

\func lamTypeLem {V : \Type} {ctx : V -> Type} {A B : Type} {f : Term (Maybe V)} (H : hasType ctx (lam f) (Arr A B))
  : hasType (maybe A ctx) f B
  \elim H
    | lamType H => H

\func red1Lem {V : \Type} {ctx : V -> Type} {a a' : Term V} (r : Red1 a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A
  \elim a, a', r, A, h
    | lam t, lam s, lamRed r, Arr A B, lamType h => lamType (red1Lem r h)
    | app t1 t2, app s1 s2, appLeft r p, B, appType h1 h2 => appType (rewriteI p h1) (red1Lem r h2)
    | app t1 t2, app s1 s2, appRight p r, B, appType h1 h2 => appType (red1Lem r h1) (rewriteI p h2)
    | app t1 t2, s, beta f p q, B, appType {A} h1 h2 =>
      rewriteI q (substLem1 ctx A B t2 f (lamTypeLem (rewriteF (sym p) h2)) h1)

\func redLem {V : \Type} {ctx : V -> Type} {a a' : Term V} (r : Red a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A
  \elim r
    | Red-refl Heq => rewriteI Heq h
    | Red-trans z Htz Hzs => redLem Hzs (red1Lem Htz h)

-- Optional
-- 10. Докажите typeableInterp из лекции